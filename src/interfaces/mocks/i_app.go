package mocks

import context "context"
import interfaces "github.com/stamm/dep_radar/src/interfaces"
import mock "github.com/stretchr/testify/mock"

// IApp is an autogenerated mock type for the IApp type
type IApp struct {
	mock.Mock
}

// Branch provides a mock function with given fields:
func (_m *IApp) Branch() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Deps provides a mock function with given fields: _a0
func (_m *IApp) Deps(_a0 context.Context) (interfaces.AppDeps, error) {
	ret := _m.Called(_a0)

	var r0 interfaces.AppDeps
	if rf, ok := ret.Get(0).(func(context.Context) interfaces.AppDeps); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(interfaces.AppDeps)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Package provides a mock function with given fields:
func (_m *IApp) Package() interfaces.Pkg {
	ret := _m.Called()

	var r0 interfaces.Pkg
	if rf, ok := ret.Get(0).(func() interfaces.Pkg); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(interfaces.Pkg)
	}

	return r0
}

// Provider provides a mock function with given fields:
func (_m *IApp) Provider() interfaces.IProvider {
	ret := _m.Called()

	var r0 interfaces.IProvider
	if rf, ok := ret.Get(0).(func() interfaces.IProvider); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interfaces.IProvider)
		}
	}

	return r0
}

var _ interfaces.IApp = (*IApp)(nil)
