package mocks

import interfaces "github.com/stamm/dep_radar/interfaces"
import mock "github.com/stretchr/testify/mock"

// IProvider is an autogenerated mock type for the IProvider type
type IProvider struct {
	mock.Mock
}

// File provides a mock function with given fields: pkg, branch, filename
func (_m *IProvider) File(pkg interfaces.Pkg, branch string, filename string) ([]byte, error) {
	ret := _m.Called(pkg, branch, filename)

	var r0 []byte
	if rf, ok := ret.Get(0).(func(interfaces.Pkg, string, string) []byte); ok {
		r0 = rf(pkg, branch, filename)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(interfaces.Pkg, string, string) error); ok {
		r1 = rf(pkg, branch, filename)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GoGetUrl provides a mock function with given fields:
func (_m *IProvider) GoGetUrl() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Tags provides a mock function with given fields: _a0
func (_m *IProvider) Tags(_a0 interfaces.Pkg) ([]interfaces.Tag, error) {
	ret := _m.Called(_a0)

	var r0 []interfaces.Tag
	if rf, ok := ret.Get(0).(func(interfaces.Pkg) []interfaces.Tag); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]interfaces.Tag)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(interfaces.Pkg) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

var _ interfaces.IProvider = (*IProvider)(nil)
